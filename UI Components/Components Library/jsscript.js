// Initialize with sample components in the canvas
function initSampleComponents() {
    const canvas = document.getElementById('canvas');
    
    // Add sample components
    canvas.innerHTML = `
        <div class="preview-component">
            <div class="fallback-button">Button Component</div>
        </div>
        
        <div class="preview-component">
            <div class="fallback-navbar">
                <div>Navbar Component</div>
                <div>Menu</div>
            </div>
        </div>
        
        <div class="preview-component">
            <div class="fallback-card">
                <div class="fallback-card-img">Card Image</div>
                <div class="fallback-card-content">
                    <h3>Card Title</h3>
                    <p>This is card content that uses your custom color scheme.</p>
                </div>
            </div>
        </div>
        
        <div class="preview-component">
            <div class="fallback-cta">
                <h2>Call To Action</h2>
                <p>This section uses your secondary color as background.</p>
                <br>
                <div class="fallback-button">Sign Up Now</div>
            </div>
        </div>
    `;
}

// Update ONLY canvas color variables when colors change
document.getElementById('colorPicker').addEventListener('input', function(e) {
    // Update the preview box
    document.getElementById('primaryPreview').style.backgroundColor = e.target.value;
    
    // Update ONLY the canvas variable (not the UI variable)
    document.documentElement.style.setProperty('--canvas-primary-color', e.target.value);
});

document.getElementById('secondaryColor').addEventListener('input', function(e) {
    // Update the preview box
    document.getElementById('secondaryPreview').style.backgroundColor = e.target.value;
    
    // Update ONLY the canvas variable (not the UI variable)
    document.documentElement.style.setProperty('--canvas-secondary-color', e.target.value);
});

// Initialize color previews
document.getElementById('primaryPreview').style.backgroundColor = document.getElementById('colorPicker').value;
document.getElementById('secondaryPreview').style.backgroundColor = document.getElementById('secondaryColor').value;

// Device selector functionality
document.getElementById('deviceType').addEventListener('change', function(e) {
    const canvas = document.getElementById('canvas');
    canvas.className = 'canvas ' + e.target.value + '-view';
});

// Function to generate components
function fetchComponents() {
    const loading = document.getElementById('loading');
    loading.style.display = 'block';
    
    // Simulate loading
    setTimeout(() => {
        loading.style.display = 'none';
        
        // Add sample components (would be generated by API in a real app)
        const componentsContainer = document.getElementById('componentsContainer');
        componentsContainer.innerHTML = `
            <div class="component-item">Button</div>
            <div class="component-item">Navbar</div>
            <div class="component-item">Card</div>
            <div class="component-item">Input Field</div>
            <div class="component-item">Footer</div>
            <div class="component-item">CTA Section</div>
        `;
        
        // Make components draggable - this would be more robust in a real app
        const items = document.querySelectorAll('.component-item');
        items.forEach(item => {
            item.draggable = true;
        });
    }, 1500);
}

// Initialize with sample components
initSampleComponents();

// Update color preview boxes when colors change
document.getElementById('colorPicker').addEventListener('input', function(e) {
    document.getElementById('primaryPreview').style.backgroundColor = e.target.value;
    document.documentElement.style.setProperty('--primary-color', e.target.value);
});

document.getElementById('secondaryColor').addEventListener('input', function(e) {
    document.getElementById('secondaryPreview').style.backgroundColor = e.target.value;
    document.documentElement.style.setProperty('--secondary-color', e.target.value);
});

// Initialize color previews
document.getElementById('primaryPreview').style.backgroundColor = document.getElementById('colorPicker').value;
document.getElementById('secondaryPreview').style.backgroundColor = document.getElementById('secondaryColor').value;

// Device selector functionality
document.getElementById('deviceType').addEventListener('change', function(e) {
    const canvas = document.getElementById('canvas');
    canvas.className = 'canvas ' + e.target.value + '-view';
});

// For demo purposes only - we would implement fetchComponents() in a real application
function fetchComponents() {
    const loading = document.getElementById('loading');
    loading.style.display = 'block';
    
    // Simulate loading
    setTimeout(() => {
        loading.style.display = 'none';
        
        // Add sample components (would be generated by API in a real app)
        const componentsContainer = document.getElementById('componentsContainer');
        componentsContainer.innerHTML = `
            <div class="component-item">Button</div>
            <div class="component-item">Navbar</div>
            <div class="component-item">Card</div>
            <div class="component-item">Input Field</div>
            <div class="component-item">Footer</div>
            <div class="component-item">CTA Section</div>
        `;
        
        // Make components draggable - this would be more robust in a real app
        const items = document.querySelectorAll('.component-item');
        items.forEach(item => {
            item.draggable = true;
        });
    }, 1500);
}

// Improved function to update canvas view with proper dimensions
function updateCanvasView() {
const deviceType = document.getElementById('deviceType').value;
const canvas = document.getElementById('canvas');
const designArea = document.querySelector('.design-area');

// Clear existing components when changing device type
canvas.innerHTML = '';

// Remove all existing view classes
canvas.classList.remove('desktop-view', 'tablet-view', 'mobile-view');

// Add the selected view class
canvas.classList.add(`${deviceType}-view`);

// Force canvas to reflect proper dimensions
if (deviceType === 'desktop') {
    canvas.style.width = '100%';
    canvas.style.height = '100%';
    canvas.style.maxWidth = '1200px';
} else if (deviceType === 'tablet') {
    canvas.style.width = '768px';
    canvas.style.height = '1024px';
} else if (deviceType === 'mobile') {
    canvas.style.width = '375px';
    canvas.style.height = '667px';
}

console.log(`Canvas updated to ${deviceType} view: ${canvas.style.width} x ${canvas.style.height}`);
}

// Modify fetchComponents function to include device type
async function fetchComponents() {
const primaryColor = document.getElementById('colorPicker').value;
const secondaryColor = document.getElementById('secondaryColor').value;
const deviceType = document.getElementById('deviceType').value;
const loadingElement = document.getElementById('loading');
const componentsContainer = document.getElementById('componentsContainer');

// Update canvas view when generating components
updateCanvasView();

// Set CSS variables for fallback components
document.documentElement.style.setProperty('--primary-color', primaryColor);
document.documentElement.style.setProperty('--secondary-color', secondaryColor);

// Show loading
loadingElement.style.display = 'block';
componentsContainer.innerHTML = '';

try {
    const apiKey = "AIzaSyAcUQ5ZMhB4byYzlNp7jZIBC1Fx_rYzp1Y"; // Replace with your actual API key
    const endpoint = `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${apiKey}`;

    const prompt = `Generate 6 different responsive UI components optimized for ${deviceType} devices using the primary color ${primaryColor} and secondary color ${secondaryColor}. 
    I need:
    1. A responsive navigation bar with hamburger menu for mobile
    2. A styled button with hover effects
    3. A responsive card component with image placeholder, title, and text
    4. A responsive footer with social media icons
    5. A form input field with validation styling
    6. A call-to-action banner with responsive layout
    
    For each component, provide the complete HTML and CSS code as inline styles. Make them look modern and professional.
    
    For ${deviceType} view:
    - Desktop: Full width components with standard navigation
    - Tablet: Optimized for 768px width with slightly simplified layouts
    - Mobile: Optimized for 375px width with stacked elements and hamburger menus
    
    Format your response as a JSON array with objects containing: 
    { 
      "type": "component-type", 
      "name": "Component Name", 
      "html": "complete-html-code-including-inline-styles"
    }
    
    Only respond with the JSON array, nothing else. No markdown, no explanations.`;

    const response = await fetch(endpoint, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            contents: [{
                parts: [{
                    text: prompt
                }]
            }]
        })
    });

    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.candidates || data.candidates.length === 0 || 
        !data.candidates[0].content || !data.candidates[0].content.parts || 
        data.candidates[0].content.parts.length === 0) {
        throw new Error("Invalid API response format");
    }
    
    // Get the text response
    const text = data.candidates[0].content.parts[0].text;
    
    // Try different approaches to extract JSON
    let components;
    try {
        // First attempt: Direct JSON parsing
        components = JSON.parse(text);
    } catch (e) {
        // Second attempt: Extract JSON from markdown
        const jsonMatch = text.match(/```(?:json)?\s*([\s\S]*?)\s*```/) || 
                         text.match(/\[\s*\{\s*"type"/);
        
        if (jsonMatch) {
            const jsonText = jsonMatch[1] || jsonMatch[0];
            try {
                components = JSON.parse(jsonText.trim());
            } catch (e2) {
                // Third attempt: Clean up the text and try again
                const cleanedText = text.replace(/```json|```/g, '').trim();
                components = JSON.parse(cleanedText);
            }
        } else {
            throw new Error("Could not extract JSON from response");
        }
    }
    
    // Validate components
    if (!Array.isArray(components) || components.length === 0) {
        throw new Error("Invalid components array");
    }
    
    // Create component items
    createComponentItems(components, primaryColor, secondaryColor);

} catch (error) {
    console.error("Error fetching components:", error);
    // Use enhanced fallback components instead
    console.log("Using fallback components");
    createComponentItems(getResponsiveFallbackComponents(deviceType), primaryColor, secondaryColor);
} finally {
    // Hide loading indicator
    loadingElement.style.display = 'none';
}
}

// Function to provide enhanced fallback components
function getResponsiveFallbackComponents(deviceType) {
// Base styles for different device types
const baseStyles = {
    desktop: {
        container: "width: 100%;",
        navbar: "padding: 15px 40px;",
        card: "width: 300px;",
        cta: "padding: 40px; max-width: 1200px; margin: 0 auto;"
    },
    tablet: {
        container: "width: 100%; max-width: 768px;",
        navbar: "padding: 12px 20px;",
        card: "width: 280px;",
        cta: "padding: 30px; max-width: 700px; margin: 0 auto;"
    },
    mobile: {
        container: "width: 100%; max-width: 375px;",
        navbar: "padding: 10px 15px;",
        card: "width: 100%;",
        cta: "padding: 20px; width: 100%;"
    }
};

const styles = baseStyles[deviceType] || baseStyles.desktop;

return [
    {
        type: "navbar",
        name: "Responsive Navigation Bar",
        html: `<div style="background-color: var(--primary-color); color: white; ${styles.navbar} display: flex; justify-content: space-between; align-items: center; ${styles.container}">
            <div style="font-weight: bold; font-size: 1.2rem;">VisionUI</div>
            <div class="desktop-menu" style="display: ${deviceType === 'mobile' ? 'none' : 'flex'}; gap: 20px;">
                <div style="cursor: pointer; padding: 5px 10px; border-radius: 4px; transition: background 0.3s;">Home</div>
                <div style="cursor: pointer; padding: 5px 10px; border-radius: 4px; transition: background 0.3s;">About</div>
                <div style="cursor: pointer; padding: 5px 10px; border-radius: 4px; transition: background 0.3s;">Services</div>

                <div style="cursor: pointer; padding: 5px 10px; border-radius: 4px; transition: background 0.3s;">Contact</div>
            </div>
            <div class="mobile-menu" style="display: ${deviceType === 'mobile' ? 'block' : 'none'}; cursor: pointer;">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3 12H21" stroke="white" stroke-width="2" stroke-linecap="round"/>
                    <path d="M3 6H21" stroke="white" stroke-width="2" stroke-linecap="round"/>
                    <path d="M3 18H21" stroke="white" stroke-width="2" stroke-linecap="round"/>
                </svg>
            </div>
        </div>`
    },
    {
        type: "button",
        name: "Enhanced Button",
        html: `<button style="background-color: var(--primary-color); color: white; border: none; padding: 12px 24px; border-radius: 6px; cursor: pointer; font-weight: 600; transition: all 0.3s; box-shadow: 0 4px 6px rgba(0,0,0,0.1); position: relative; overflow: hidden;">
            <div style="position: relative; z-index: 2;">Get Started</div>
            <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255,255,255,0.1); transform: translateY(100%); transition: transform 0.3s; z-index: 1;"></div>
        </button>`
    },
    {
        type: "card",
        name: "Responsive Card",
        html: `<div style="border-radius: 12px; overflow: hidden; ${styles.card} box-shadow: 0 8px 16px rgba(0,0,0,0.1); transition: transform 0.3s, box-shadow 0.3s;">
            <div style="height: 180px; background-color: var(--secondary-color); display: flex; align-items: center; justify-content: center; overflow: hidden;">
                <div style="font-size: 3rem; color: var(--primary-color); opacity: 0.5;">IMAGE</div>
            </div>
            <div style="padding: 20px;">
                <h3 style="margin-bottom: 12px; color: var(--primary-color); font-size: 1.25rem;">Card Title</h3>
                <p style="color: #555; line-height: 1.5; margin-bottom: 15px;">This responsive card adapts to different screen sizes while maintaining its visual appeal.</p>
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <span style="color: var(--primary-color); font-weight: 500;">Learn more</span>
                    <div style="width: 30px; height: 30px; border-radius: 50%; background-color: var(--primary-color); display: flex; align-items: center; justify-content: center; color: white; font-size: 1.2rem;">→</div>
                </div>
            </div>
        </div>`
    },
    {
        type: "footer",
        name: "Responsive Footer",
        html: `<div style="background-color: var(--primary-color); color: white; padding: ${deviceType === 'mobile' ? '20px 15px' : '30px 40px'}; ${styles.container}">
            <div style="display: flex; flex-direction: ${deviceType === 'mobile' ? 'column' : 'row'}; justify-content: space-between; flex-wrap: wrap; gap: 20px; margin-bottom: 20px;">
                <div style="flex: 1; min-width: ${deviceType === 'mobile' ? '100%' : '200px'};">
                    <h3 style="font-size: 1.25rem; margin-bottom: 15px;">VisionUI</h3>
                    <p style="opacity: 0.8; line-height: 1.5;">Creating beautiful and responsive components for your next project.</p>
                </div>
                <div style="flex: 1; min-width: ${deviceType === 'mobile' ? '100%' : '200px'};">
                    <h4 style="font-size: 1rem; margin-bottom: 15px;">Quick Links</h4>
                    <div style="display: flex; flex-direction: column; gap: 10px;">
                        <div>Home</div>
                        <div>About</div>
                        <div>Services</div>
                        <div>Contact</div>
                    </div>
                </div>
                <div style="flex: 1; min-width: ${deviceType === 'mobile' ? '100%' : '200px'};">
                    <h4 style="font-size: 1rem; margin-bottom: 15px;">Connect With Us</h4>
                    <div style="display: flex; gap: 15px;">
                        <div style="width: 36px; height: 36px; border-radius: 50%; background: rgba(255,255,255,0.2); display: flex; align-items: center; justify-content: center;">X</div>
                        <div style="width: 36px; height: 36px; border-radius: 50%; background: rgba(255,255,255,0.2); display: flex; align-items: center; justify-content: center;">F</div>
                        <div style="width: 36px; height: 36px; border-radius: 50%; background: rgba(255,255,255,0.2); display: flex; align-items: center; justify-content: center;">I</div>
                    </div>
                </div>
            </div>
            <div style="border-top: 1px solid rgba(255,255,255,0.1); padding-top: 20px; text-align: center;">
                © 2025 VisionUI. All rights reserved.
            </div>
        </div>`
    },
    {
        type: "input",
        name: "Enhanced Form Input",
        html: `<div style="margin-bottom: 20px; width: ${deviceType === 'mobile' ? '100%' : '300px'};">
            <label style="display: block; margin-bottom: 8px; font-weight: 500;">Email Address</label>
            <div style="position: relative;">
                <input style="width: 100%; padding: 12px 16px; border: 2px solid var(--primary-color); border-radius: 6px; transition: all 0.3s; outline: none; padding-left: 40px;" type="email" placeholder="Enter your email">
                <div style="position: absolute; left: 12px; top: 50%; transform: translateY(-50%); color: var(--primary-color);">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M22 6C22 4.9 21.1 4 20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6ZM20 6L12 11L4 6H20ZM20 18H4V8L12 13L20 8V18Z" fill="currentColor"/>
                    </svg>
                </div>
            </div>
            <div style="margin-top: 6px; font-size: 0.8rem; color: #666;">We'll never share your email with anyone else.</div>
        </div>`
    },
    {
        type: "cta",
        name: "Responsive CTA Banner",
        html: `<div style="background-color: var(--secondary-color); ${styles.cta} border-radius: 12px; text-align: ${deviceType === 'mobile' ? 'center' : 'left'}; display: flex; flex-direction: ${deviceType === 'mobile' ? 'column' : 'row'}; align-items: ${deviceType === 'mobile' ? 'center' : 'flex-start'}; justify-content: space-between; gap: 20px;">
            <div style="flex: ${deviceType === 'mobile' ? '1' : '2'};">
                <h2 style="color: var(--primary-color); font-size: ${deviceType === 'mobile' ? '1.5rem' : '2rem'}; margin-bottom: 15px; font-weight: 700;">Start Building Today</h2>
                <p style="margin-bottom: 20px; line-height: 1.6; max-width: 600px;">Get started with our component library and create beautiful interfaces in minutes. Try it free for 14 days.</p>
                ${deviceType === 'mobile' ? '' : '<button style="background-color: var(--primary-color); color: white; border: none; padding: 12px 30px; border-radius: 6px; cursor: pointer; font-weight: 600; transition: all 0.3s; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">Get Started Free</button>'}
            </div>
            ${deviceType === 'mobile' ? '<button style="background-color: var(--primary-color); color: white; border: none; padding: 12px 30px; border-radius: 6px; cursor: pointer; font-weight: 600; transition: all 0.3s; box-shadow: 0 4px 8px rgba(0,0,0,0.1); width: 100%;">Get Started Free</button>' : 
            '<div style="flex: 1; display: flex; justify-content: center; align-items: center;"><div style="width: 150px; height: 150px; background-color: rgba(255,255,255,0.5); border-radius: 20px; display: flex; align-items: center; justify-content: center; color: var(--primary-color); font-size: 3rem; transform: rotate(-5deg);">✨</div></div>'}
        </div>`
    }
];
}

function createComponentItems(components, primaryColor, secondaryColor) {
const componentsContainer = document.getElementById('componentsContainer');

components.forEach((component, index) => {
    // Replace color variables in HTML if needed
    let html = component.html;
    html = html.replace(/var\(--primary-color\)/g, primaryColor);
    html = html.replace(/var\(--secondary-color\)/g, secondaryColor);
    
    const componentItem = document.createElement('div');
    componentItem.className = 'component-item';
    componentItem.setAttribute('draggable', 'true');
    
    // Store the component data with updated HTML
    const componentData = {
        ...component,
        html: html
    };
    componentItem.dataset.component = JSON.stringify(componentData);
    
    // Create a preview
    const preview = document.createElement('div');
    preview.className = 'component-preview';
    preview.innerHTML = `<strong>${component.name}</strong>`;
    
    componentItem.appendChild(preview);
    componentItem.addEventListener('dragstart', handleDragStart);
    
    componentsContainer.appendChild(componentItem);
});
}

function handleDragStart(event) {
event.dataTransfer.setData('text/plain', event.target.dataset.component);
}

document.getElementById('canvas').addEventListener('dragover', event => {
event.preventDefault();
});

document.getElementById('canvas').addEventListener('drop', event => {
event.preventDefault();
try {
    const componentData = JSON.parse(event.dataTransfer.getData('text/plain'));
    
    // Create a container for the component
    const container = document.createElement('div');
    container.className = 'canvas-element';
    
    // Calculate position relative to canvas
    const canvasRect = document.getElementById('canvas').getBoundingClientRect();
    const x = event.clientX - canvasRect.left;
    const y = event.clientY - canvasRect.top;
    
    container.style.left = `${x}px`;
    container.style.top = `${y}px`;
    
    // Add the component HTML
    container.innerHTML = componentData.html;
    
    // Make the component movable
    container.addEventListener('mousedown', initDrag);
    
    document.getElementById('canvas').appendChild(container);
} catch (error) {
    console.error("Error dropping component:", error);
}
});

function initDrag(event) {
// Prevent drag start on child elements
if (event.target !== event.currentTarget) {
    // Allow normal interaction with inputs and buttons
    if (event.target.tagName === 'INPUT' || 
        event.target.tagName === 'BUTTON' || 
        event.target.tagName === 'A') {
        return;
    }
    // For other elements, let the parent handle it
    event.stopPropagation();
}

const element = event.currentTarget;

// Get initial mouse position
const startX = event.clientX;
const startY = event.clientY;

// Get initial element position
const startLeft = parseInt(element.style.left) || 0;
const startTop = parseInt(element.style.top) || 0;

// Function to handle mouse movement
function moveElement(e) {
    // Calculate new position
    const newLeft = startLeft + (e.clientX - startX);
    const newTop = startTop + (e.clientY - startY);
    
    // Set new position
    element.style.left = `${newLeft}px`;
    element.style.top = `${newTop}px`;
}

// Function to remove event listeners when done dragging
function stopDrag() {
    document.removeEventListener('mousemove', moveElement);
    document.removeEventListener('mouseup', stopDrag);
}

// Add event listeners
document.addEventListener('mousemove', moveElement);
document.addEventListener('mouseup', stopDrag);

// Prevent default behavior
event.preventDefault();
}

// Initialize the app
window.onload = function() {
// Add event listener for device type changes
document.getElementById('deviceType').addEventListener('change', function() {
    updateCanvasView();
    // Fetch new components based on the selected device type
    fetchComponents();
});

// Initial fetch and canvas setup
updateCanvasView();
fetchComponents();
};